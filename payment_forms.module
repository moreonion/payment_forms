<?php

use Drupal\little_helpers\ArrayConfig;

/**
 * Form callback for payment forms.
 *
 * This callback has to be set in the payment controller class. This function
 * assumes that a PaymentMethodController using this callback implements the
 * paymentForm() method according to @see FormCallbacksMixin.
 */
function payment_forms_payment_form(array &$element, array &$form_state) {
  $payment = $form_state['payment'];
  $form = $payment->method->controller->paymentForm($payment);
  $element = $form->form($element, $form_state, $payment);
  $element['#form'] = $form;
  drupal_alter('payment_forms_payment_form', $element, $payment);
  return $element;
}

/**
 * Callback for form validation.
 *
 * The function name is automatically derived from the
 * form callback name.
 */
function payment_forms_payment_form_validate(&$element, &$form_state) {
  $payment = $form_state['payment'];
  $form = $element['#form'];
  $form->validate($element, $form_state, $payment);
}

/**
 * Form element callback: Payment method configuration.
 *
 * The callback to this function has to be set in the payment controller class.
 * This function assumes that a the PaymentMethodController class implements the
 * configurationForm() method according to @see FormCallbacksMixin.
 */
function payment_forms_method_configuration_form($element, &$form_state) {
  $method = $form_state['payment_method'];
  ArrayConfig::mergeDefaults($method->controller_data, $method->controller->controller_data_defaults);
  $form = $method->controller->configurationForm($method);
  $element = $form->form($element, $form_state, $method);
  $element['#form'] = $form;
  return $element;
}

/**
 * Form validate callback for the payment_method configuration.
 *
 * @see payment_forms_method_configuration_form().
 */
function payment_forms_method_configuration_form_validate($element, &$form_state) {
  $method = $form_state['payment_method'];
  $form = $element['#form'];
  $form->validate($element, $form_state, $method);
}
